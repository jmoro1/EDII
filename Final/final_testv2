typedef int            int32_t;
typedef short          int16_t;
typedef char           int8_t;
typedef unsigned int   uint32_t;
typedef unsigned short uint16_t;
typedef unsigned char  uint8_t;
typedef void(*interrupt_t)(void);

#define SRAM_SIZE ((uint32_t) 0x00005000)
#define SRAM_BASE ((uint32_t) 0x20000000)
#define STACKINIT ((interrupt_t)(SRAM_BASE+SRAM_SIZE))


//RCC AND APB2ENR ADRESS AND OFFSET
#define RCC_BASE_ADDRESS ((uint32_t) 0x40021000) //RESET AND CLOCK CONTROL BASE ADDRESS
#define APB2ENR_GPIOC_ENA_BIT 4 //BIT 4 TIENE QUE ESTAR EN 1 PARA DARLE ENABLE AL CLOCK DEL GPIOC
#define APB2ENR_GPIOB_ENA_BIT 3 //BIT 4 TIENE QUE ESTAR EN 1 PARA DARLE ENABLE AL CLOCK DEL GPIOB
//GPIOC AND GPIOB, CRH AND ODR BASE ADDRESS AND OFFSETS
#define GPIOC_BASE_ADDRESS ((uint32_t) 0x40011000) // GPIOC BASE ADDRESS
#define GPIOB_BASE_ADDRESS ((uint32_t) 0x40010C00) // GPIOB BASE ADDRESS
// Clock registers
#define RCC_CR_OFFSET		0x00
#define RCC_CFGR_OFFSET		0x04
#define AHBENR_OFFSET		0x14
#define APB2ENR_OFFSET		0x18
#define APB1ENR_OFFSET		0x1C
//FLASH REGISTERS
#define FLASH_BASE			0x40022000
#define FLASH_ACR_OFFSET	0x00
//PUNTERO A LA STRUCT GPIO
#define GPIO_C ((GPIO_Type *) GPIOC_BASE_ADDRESS)
#define GPIO_B ((GPIO_Type *) GPIOB_BASE_ADDRESS)
// Direccion del registro APB2ENR del RCC
volatile uint32_t* const RCC_APB2ENR_ptr = (uint32_t *)(RCC_BASE_ADDRESS + APB2ENR_OFFSET);
volatile uint32_t* const RCC_APB1ENR_ptr = (uint32_t *)(RCC_BASE_ADDRESS + APB1ENR_OFFSET);
volatile uint32_t* const RCC_AHBENR_ptr = (uint32_t *)(RCC_BASE_ADDRESS + AHBENR_OFFSET);
volatile uint32_t* const RCC_CR_ptr = (uint32_t *)(RCC_BASE_ADDRESS + RCC_CR_OFFSET);
volatile uint32_t* const RCC_CFGR_ptr = (uint32_t *)(RCC_BASE_ADDRESS + RCC_CFGR_OFFSET);
volatile uint32_t* const FLASH_ACR_ptr = (uint32_t *)(FLASH_BASE + FLASH_ACR_OFFSET);

//DEFINICIONES DE BITS PARA CONFIG DEL PC13 COMO OUTPUT
#define PC13_MODE_BIT0 20
#define PC13_MODE_BIT1 21
#define PC13_CNF_BIT0 22
#define PC13_CNF_BIT1 23
#define PC13_ODR_BIT 13
#define PB6_ODR_BIT 6
#define PB7_ODR_BIT 7
#define PB4_MODE_BIT0 16
#define PB4_MODE_BIT1 17
#define PB4_CNF_BIT0 18
#define PB4_CNF_BIT1 19 
#define PB5_MODE_BIT0 20
#define PB5_MODE_BIT1 21
#define PB5_CNF_BIT0 22
#define PB5_CNF_BIT1 23
#define PB6_MODE_BIT0 24
#define PB6_MODE_BIT1 25
#define PB6_CNF_BIT0 26
#define PB6_CNF_BIT1 27
#define PB7_MODE_BIT0 28
#define PB7_MODE_BIT1 29
#define PB7_CNF_BIT0 30
#define PB7_CNF_BIT1 31
#define PB5_IDR_BIT 5
#define PB4_IDR_BIT 4

typedef struct{ //DECLARO UNA STRUCT PARA ACCEDER A LOS REGISTROS DE LOS GPIO
    volatile uint32_t GPIO_CRL; //PORT CONFIGURATION REGISTER LOW (0-7) (OFFSET 0x00)
    volatile uint32_t GPIO_CRH; //PORT CONFIGURATION REGISTER HIGH (8-15)(OFFSET 0x04) 
    volatile const uint32_t GPIO_IDR;//INPUT DATA REGISTER(OFFSET 0x08) 
    volatile uint32_t GPIO_ODR;//OUTPUT DATA REGISTER(OFFSET 0x0C)
    volatile uint32_t GPIO_BSRR; // BIT SET/RESET REGISTER(OFFSET 0x10)
    volatile uint32_t GPIO_BRR;//BIT RESET REGISTER(OFFSET 0x14)
    volatile uint32_t GPIO_LCKR;//PORT CONFIGURATION LOCK REGISTER(OFFSET 0x18)
}GPIO_Type;   



void SystemClockInit(void){
    *RCC_CR_ptr |= (1 << 16); 				// Enable HSE
	while (!(*RCC_CR_ptr & (1 << 17)));		// Wait for HSE is locked

	*RCC_CR_ptr &= ~(1 << 24); 				// Disable PLL
	*RCC_CFGR_ptr |= (0b0111 << 18);        // Set PLLMULL to 9. Set PLL output clock to 72 Mhz
	*RCC_CFGR_ptr |= (1 << 16);             // Select HSE as the PLL source clock
	*RCC_CR_ptr |= (1 << 24);               // Enable PLL
	while (!(*RCC_CR_ptr & (1 << 25)));		// Wait for PLL to lock
	
	/*FLASH ACR*/
	*FLASH_ACR_ptr |= (0b010 << 0);			// Set FLASH WAIT STATE to 2
	*RCC_CFGR_ptr |= (0b0000 << 4);         // Set AHB HPRE division to 1. Set AHB clock to 72 Mhz
	*RCC_CFGR_ptr |= (0b0010 << 14);         // Set AHB HPRE division to 1. Set AHB clock to 72 Mhz
	*RCC_CFGR_ptr |= (0b100 << 8);          // Set APB1 PPRE1 division to 2. Set AHB clock to 36 Mhz
	*RCC_CFGR_ptr |= (0b10 << 0);			// Select PLL clock as the system clock
	while (!(*RCC_CFGR_ptr & (0b10 << 2)));	// Wait for PLL clock to be selected
}

void GPIOInit(void){

    //CALCULO LA DIRECCION DEL APB2ENR
    volatile uint32_t *pAPB2ENR = (uint32_t *)(RCC_BASE_ADDRESS + APB2ENR_OFFSET);

    *pAPB2ENR |= (0x1 << APB2ENR_GPIOC_ENA_BIT); //DOY ENABLE AL CLOCK DEL GPIOC
    *pAPB2ENR |= (0x1 << APB2ENR_GPIOB_ENA_BIT); //DOY ENABLE AL CLOCK DEL GPIOB

    //SETEO EL CRH DEL PC13 COMO 00 GENERAL PURPOSE OUTPUT Y OUTPUT CON 01 MODO OUTPUT MAX 10MHz
    GPIO_C->GPIO_CRH |= ((0x1 << PC13_MODE_BIT0) | (0x0 << PC13_MODE_BIT1) | (0x0 << PC13_CNF_BIT0) | (0x0 << PC13_CNF_BIT1));
    GPIO_B->GPIO_CRL |= ((0x1 << PB6_MODE_BIT0) | (0x0 << PB6_MODE_BIT1) | (0x0 << PB6_CNF_BIT0) | (0x0 << PB6_CNF_BIT1)); // LED 2
    GPIO_B->GPIO_CRL |= ((0x1 << PB7_MODE_BIT0) | (0x0 << PB7_MODE_BIT1) | (0x0 << PB7_CNF_BIT0) | (0x0 << PB7_CNF_BIT1)); // LED 3
    //SETEO EL CRL DEL PB5 COMO - MODE 00  INPUT - CNF 10 INPUT WITH PUSH-PULL
    GPIO_B->GPIO_CRL |= ((0x0 << PB5_MODE_BIT0) | (0x0 << PB5_MODE_BIT1) | (0x0 << PB5_CNF_BIT0) | (0x1 << PB5_CNF_BIT1)); // MODULO A
    GPIO_B->GPIO_CRL |= ((0x0 << PB4_MODE_BIT0) | (0x0 << PB4_MODE_BIT1) | (0x0 << PB4_CNF_BIT0) | (0x1 << PB4_CNF_BIT1)); // MODULO B

    GPIO_C->GPIO_ODR |= (0x1 << PC13_ODR_BIT); // INICIALIZO EL LED PC13 APAGADO
}

uint32_t GetIDR(void){
    uint32_t IDR = GPIO_B->GPIO_IDR;
    return IDR;
}
int main(void)
{
    SystemClockInit();
    GPIOInit();

    /*
    uint32_t SysTickCountFlagMask = 1 << CSR_COUNTFLAG_BIT;//DEFINO LA MASCARA DEL CSR CON EL BIT 16 (COUNTFLAG) EN 1
    uint32_t pb5IDRMask = 1 << PB5_IDR_BIT;
    uint32_t pb4IDRMask = 1 << PB4_IDR_BIT;
    uint32_t pb6ODRMask = 1 << PB6_ODR_BIT;
    uint32_t pb7ODRMask = 1 << PB7_ODR_BIT;
    
    */
    uint32_t contador = 0;


	while(1){
        
        
        /*  //ESTO FALTA
        if(contador >= 10){// SI CONTADOR > 10 // PRENDO LED 3
            GPIO_B->GPIO_ODR ^= pb7ODRMask;
            }

            */

            uint32_t GPIOBIDRValue = GetIDR();

        if((GPIOBIDRValue == 16))  { //VEO SI EL BIT 16 DEL CSR ESTA EN 1
            for(volatile uint32_t i=0;i<500000;i++);
            uint32_t GPIOBIDRValue = GetIDR();
            if(GPIOBIDRValue == 0){
                GPIO_C->GPIO_ODR = (0x0 << PC13_ODR_BIT); // CAMBIO EL ESTADO DEL BIT 13 DEL ODR
                for(volatile uint32_t i=0;i<5000000;i++);
                GPIO_C->GPIO_ODR = (0x1 << PC13_ODR_BIT);
                contador++;
            }

        }

        if((GPIOBIDRValue == 32))  { //VEO SI EL BIT 16 DEL CSR ESTA EN 1
            for(volatile uint32_t i=0;i<500000;i++);
            uint32_t GPIOBIDRValue = GetIDR();
            if(GPIOBIDRValue == 0){
                GPIO_C->GPIO_ODR = (0x0 << PC13_ODR_BIT); // CAMBIO EL ESTADO DEL BIT 13 DEL ODR
                for(volatile uint32_t i=0;i<5000000;i++);
                GPIO_C->GPIO_ODR = (0x1 << PC13_ODR_BIT);
                if(contador > 0){
                    contador--;
                }
            }
        }


    }


    
return 0;
}
typedef void(*interrupt_t)(void);
const interrupt_t vector_table[256] __attribute__ ((section(".vtab"))) = {
	STACKINIT,												// 0x0000_0000 Stack Pointer
	(interrupt_t) main,										// 0x0000_0004 Reset
};
